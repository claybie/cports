Source: https://gitlab.com/akortunov/openmw/-/commit/7d2993adc8d69959efdd2173d4a5be75d8d9c67b
Reported: https://gitlab.com/OpenMW/openmw/-/issues/7182
Reason: Fix build with ffmpeg 7

diff -Naur openmw-openmw-0.48.0/apps/openmw/mwsound/ffmpeg_decoder.cpp openmw-openmw-0.48.0.new/apps/openmw/mwsound/ffmpeg_decoder.cpp
--- openmw-openmw-0.48.0/apps/openmw/mwsound/ffmpeg_decoder.cpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/apps/openmw/mwsound/ffmpeg_decoder.cpp	2024-04-08 21:39:43.041188443 +0200
@@ -1,5 +1,6 @@
 #include "ffmpeg_decoder.hpp"
 
+#include <libavutil/channel_layout.h>
 #include <memory>
 
 #include <stdexcept>
@@ -29,7 +30,11 @@
     }
 }
 
+#if LIBAVFORMAT_VERSION_MAJOR >= 61
+int FFmpeg_Decoder::writePacket(void *, const uint8_t *, int)
+#else
 int FFmpeg_Decoder::writePacket(void *, uint8_t *, int)
+#endif
 {
     Log(Debug::Error) << "can't write to read-only stream";
     return -1;
@@ -124,8 +129,8 @@
             if(!mDataBuf || mDataBufLen < mFrame->nb_samples)
             {
                 av_freep(&mDataBuf);
-                if(av_samples_alloc(&mDataBuf, nullptr, av_get_channel_layout_nb_channels(mOutputChannelLayout),
-                                    mFrame->nb_samples, mOutputSampleFormat, 0) < 0)
+                if(av_samples_alloc(&mDataBuf, nullptr, mOutputChannelLayout.nb_channels, mFrame->nb_samples,
+                                    mOutputSampleFormat, 0) < 0)
                     return false;
                 else
                     mDataBufLen = mFrame->nb_samples;
@@ -159,7 +164,7 @@
             if(!getAVAudioData())
                 break;
             mFramePos = 0;
-            mFrameSize = mFrame->nb_samples * av_get_channel_layout_nb_channels(mOutputChannelLayout) *
+            mFrameSize = mFrame->nb_samples * mOutputChannelLayout.nb_channels *
                          av_get_bytes_per_sample(mOutputSampleFormat);
         }
 
@@ -256,11 +261,11 @@
         else
             mOutputSampleFormat = AV_SAMPLE_FMT_S16;
 
-        mOutputChannelLayout = (*mStream)->codecpar->channel_layout;
-        if(mOutputChannelLayout == 0)
-            mOutputChannelLayout = av_get_default_channel_layout(mCodecCtx->channels);
+        mOutputChannelLayout = (*mStream)->codecpar->ch_layout;
+        if(mOutputChannelLayout.u.mask == 0)
+            av_channel_layout_default(&mOutputChannelLayout, mCodecCtx->ch_layout.nb_channels);
 
-        mCodecCtx->channel_layout = mOutputChannelLayout;
+        mCodecCtx->ch_layout = mOutputChannelLayout;
     }
     catch(...)
     {
@@ -346,47 +351,49 @@
         *type = SampleType_Int16;
     }
 
-    if(mOutputChannelLayout == AV_CH_LAYOUT_MONO)
+    if(mOutputChannelLayout.u.mask == AV_CH_LAYOUT_MONO)
         *chans = ChannelConfig_Mono;
-    else if(mOutputChannelLayout == AV_CH_LAYOUT_STEREO)
+    else if(mOutputChannelLayout.u.mask == AV_CH_LAYOUT_STEREO)
         *chans = ChannelConfig_Stereo;
-    else if(mOutputChannelLayout == AV_CH_LAYOUT_QUAD)
+    else if(mOutputChannelLayout.u.mask == AV_CH_LAYOUT_QUAD)
         *chans = ChannelConfig_Quad;
-    else if(mOutputChannelLayout == AV_CH_LAYOUT_5POINT1)
+    else if(mOutputChannelLayout.u.mask == AV_CH_LAYOUT_5POINT1)
         *chans = ChannelConfig_5point1;
-    else if(mOutputChannelLayout == AV_CH_LAYOUT_7POINT1)
+    else if(mOutputChannelLayout.u.mask == AV_CH_LAYOUT_7POINT1)
         *chans = ChannelConfig_7point1;
     else
     {
         char str[1024];
-        av_get_channel_layout_string(str, sizeof(str), mCodecCtx->channels, mCodecCtx->channel_layout);
+        av_channel_layout_describe(&mCodecCtx->ch_layout, str, sizeof(str));
         Log(Debug::Error) << "Unsupported channel layout: "<< str;
 
-        if(mCodecCtx->channels == 1)
+        if (mCodecCtx->ch_layout.nb_channels == 1)
         {
-            mOutputChannelLayout = AV_CH_LAYOUT_MONO;
+            mOutputChannelLayout = AV_CHANNEL_LAYOUT_MONO;
             *chans = ChannelConfig_Mono;
         }
         else
         {
-            mOutputChannelLayout = AV_CH_LAYOUT_STEREO;
+            mOutputChannelLayout = AV_CHANNEL_LAYOUT_STEREO;
             *chans = ChannelConfig_Stereo;
         }
     }
 
     *samplerate = mCodecCtx->sample_rate;
-    int64_t ch_layout = mCodecCtx->channel_layout;
-    if(ch_layout == 0)
-        ch_layout = av_get_default_channel_layout(mCodecCtx->channels);
+    AVChannelLayout ch_layout = mCodecCtx->ch_layout;
+    if(ch_layout.u.mask == 0)
+    {
+        av_channel_layout_default(&ch_layout, mCodecCtx->ch_layout.nb_channels);
+    }
 
     if(mOutputSampleFormat != mCodecCtx->sample_fmt ||
-       mOutputChannelLayout != ch_layout)
+       mOutputChannelLayout.u.mask != ch_layout.u.mask)
     {
-        mSwr = swr_alloc_set_opts(mSwr,                   // SwrContext
-                          mOutputChannelLayout,           // output ch layout
+        swr_alloc_set_opts2(&mSwr,                        // SwrContext
+                          &mOutputChannelLayout,          // output ch layout
                           mOutputSampleFormat,            // output sample format
                           mCodecCtx->sample_rate, // output sample rate
-                          ch_layout,                      // input ch layout
+                          &ch_layout,                     // input ch layout
                           mCodecCtx->sample_fmt,         // input sample format
                           mCodecCtx->sample_rate, // input sample rate
                           0,                              // logging level offset
@@ -419,7 +426,7 @@
 
     while(getAVAudioData())
     {
-        size_t got = mFrame->nb_samples * av_get_channel_layout_nb_channels(mOutputChannelLayout) *
+        size_t got = mFrame->nb_samples * mOutputChannelLayout.nb_channels *
                      av_get_bytes_per_sample(mOutputSampleFormat);
         const char *inbuf = reinterpret_cast<char*>(mFrameData[0]);
         output.insert(output.end(), inbuf, inbuf+got);
@@ -428,7 +435,7 @@
 
 size_t FFmpeg_Decoder::getSampleOffset()
 {
-    int delay = (mFrameSize-mFramePos) / av_get_channel_layout_nb_channels(mOutputChannelLayout) /
+    int delay = (mFrameSize-mFramePos) / mOutputChannelLayout.nb_channels /
                 av_get_bytes_per_sample(mOutputSampleFormat);
     return (int)(mNextPts*mCodecCtx->sample_rate) - delay;
 }
@@ -444,7 +451,7 @@
   , mNextPts(0.0)
   , mSwr(nullptr)
   , mOutputSampleFormat(AV_SAMPLE_FMT_NONE)
-  , mOutputChannelLayout(0)
+  , mOutputChannelLayout({})
   , mDataBuf(nullptr)
   , mFrameData(nullptr)
   , mDataBufLen(0)
diff -Naur openmw-openmw-0.48.0/apps/openmw/mwsound/ffmpeg_decoder.hpp openmw-openmw-0.48.0.new/apps/openmw/mwsound/ffmpeg_decoder.hpp
--- openmw-openmw-0.48.0/apps/openmw/mwsound/ffmpeg_decoder.hpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/apps/openmw/mwsound/ffmpeg_decoder.hpp	2024-04-08 21:40:39.479754311 +0200
@@ -49,7 +49,7 @@
 
         SwrContext *mSwr;
         enum AVSampleFormat mOutputSampleFormat;
-        int64_t mOutputChannelLayout;
+        AVChannelLayout mOutputChannelLayout;
         uint8_t *mDataBuf;
         uint8_t **mFrameData;
         int mDataBufLen;
@@ -59,7 +59,11 @@
         Files::IStreamPtr mDataStream;
 
         static int readPacket(void *user_data, uint8_t *buf, int buf_size);
+#if LIBAVFORMAT_VERSION_MAJOR >= 61
+        static int writePacket(void *user_data, const uint8_t *buf, int buf_size);
+#else
         static int writePacket(void *user_data, uint8_t *buf, int buf_size);
+#endif
         static int64_t seek(void *user_data, int64_t offset, int whence);
 
         bool getAVAudioData();
diff -Naur openmw-openmw-0.48.0/apps/openmw/mwsound/movieaudiofactory.cpp openmw-openmw-0.48.0.new/apps/openmw/mwsound/movieaudiofactory.cpp
--- openmw-openmw-0.48.0/apps/openmw/mwsound/movieaudiofactory.cpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/apps/openmw/mwsound/movieaudiofactory.cpp	2024-04-08 21:09:49.800445128 +0200
@@ -44,7 +44,7 @@
 
         size_t getSampleOffset()
         {
-            ssize_t clock_delay = (mFrameSize-mFramePos) / av_get_channel_layout_nb_channels(mOutputChannelLayout) /
+            ssize_t clock_delay = (mFrameSize - mFramePos) / mOutputChannelLayout.nb_channels /
                                   av_get_bytes_per_sample(mOutputSampleFormat);
             return (size_t)(mAudioClock*mAudioContext->sample_rate) - clock_delay;
         }
diff -Naur openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/audiodecoder.cpp openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/audiodecoder.cpp
--- openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/audiodecoder.cpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/audiodecoder.cpp	2024-04-08 21:13:37.003154111 +0200
@@ -53,7 +53,7 @@
     : mVideoState(videoState)
     , mAVStream(*videoState->audio_st)
     , mOutputSampleFormat(AV_SAMPLE_FMT_NONE)
-    , mOutputChannelLayout(0)
+    , mOutputChannelLayout({})
     , mOutputSampleRate(0)
     , mFramePos(0)
     , mFrameSize(0)
@@ -109,30 +109,31 @@
 
     AVSampleFormat inputSampleFormat = mAudioContext->sample_fmt;
 
-    uint64_t inputChannelLayout = mAudioContext->channel_layout;
-    if (inputChannelLayout == 0)
-        inputChannelLayout = av_get_default_channel_layout(mAudioContext->channels);
+    AVChannelLayout inputChannelLayout = mAudioContext->ch_layout;
+    if (inputChannelLayout.u.mask != 0)
+        mOutputChannelLayout = inputChannelLayout;
+    else
+        av_channel_layout_default(&mOutputChannelLayout, mAudioContext->ch_layout.nb_channels);
 
     int inputSampleRate = mAudioContext->sample_rate;
 
     mOutputSampleRate = inputSampleRate;
     mOutputSampleFormat = inputSampleFormat;
-    mOutputChannelLayout = inputChannelLayout;
-    adjustAudioSettings(mOutputSampleFormat, mOutputChannelLayout, mOutputSampleRate);
+    adjustAudioSettings(mOutputSampleFormat, mOutputChannelLayout.u.mask, mOutputSampleRate);
 
     if (inputSampleFormat != mOutputSampleFormat
-            || inputChannelLayout != mOutputChannelLayout
+            || inputChannelLayout.u.mask != mOutputChannelLayout.u.mask
             || inputSampleRate != mOutputSampleRate)
     {
-        mAudioResampler->mSwr = swr_alloc_set_opts(mAudioResampler->mSwr,
-                          mOutputChannelLayout,
-                          mOutputSampleFormat,
-                          mOutputSampleRate,
-                          inputChannelLayout,
-                          inputSampleFormat,
-                          inputSampleRate,
-                          0,                             // logging level offset
-                          nullptr);                      // log context
+        swr_alloc_set_opts2(&mAudioResampler->mSwr,
+          &mOutputChannelLayout,
+          mOutputSampleFormat,
+          mOutputSampleRate,
+          &inputChannelLayout,
+          inputSampleFormat,
+          inputSampleRate,
+          0,                             // logging level offset
+          nullptr);                      // log context
         if(!mAudioResampler->mSwr)
             fail(std::string("Couldn't allocate SwrContext"));
         if(swr_init(mAudioResampler->mSwr) < 0)
@@ -158,7 +159,7 @@
         if(fabs(avg_diff) >= mAudioDiffThreshold)
         {
             int n = av_get_bytes_per_sample(mOutputSampleFormat) *
-                    av_get_channel_layout_nb_channels(mOutputChannelLayout);
+                    mOutputChannelLayout.nb_channels;
             sample_skip = ((int)(diff * mAudioContext->sample_rate) * n);
         }
     }
@@ -204,7 +205,7 @@
                 if(!mDataBuf || mDataBufLen < frame->nb_samples)
                 {
                     av_freep(&mDataBuf);
-                    if(av_samples_alloc(&mDataBuf, nullptr, av_get_channel_layout_nb_channels(mOutputChannelLayout),
+                    if(av_samples_alloc(&mDataBuf, nullptr, mOutputChannelLayout.nb_channels,
                                         frame->nb_samples, mOutputSampleFormat, 0) < 0)
                         break;
                     else
@@ -221,7 +222,7 @@
             else
                 mFrameData = &frame->data[0];
 
-            int result = frame->nb_samples * av_get_channel_layout_nb_channels(mOutputChannelLayout) *
+            int result = frame->nb_samples * mOutputChannelLayout.nb_channels *
                     av_get_bytes_per_sample(mOutputSampleFormat);
 
             /* We have data, return it and come back for more later */
@@ -298,7 +299,7 @@
             len1 = std::min<size_t>(len1, -mFramePos);
 
             int n = av_get_bytes_per_sample(mOutputSampleFormat)
-                    * av_get_channel_layout_nb_channels(mOutputChannelLayout);
+                    * mOutputChannelLayout.nb_channels;
 
             /* add samples by copying the first sample*/
             if(n == 1)
@@ -348,7 +349,7 @@
 
 uint64_t MovieAudioDecoder::getOutputChannelLayout() const
 {
-    return mOutputChannelLayout;
+    return mOutputChannelLayout.u.mask;
 }
 
 AVSampleFormat MovieAudioDecoder::getOutputSampleFormat() const
diff -Naur openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/audiodecoder.hpp openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/audiodecoder.hpp
--- openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/audiodecoder.hpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/audiodecoder.hpp	2024-04-08 21:13:57.180300798 +0200
@@ -43,7 +43,7 @@
     AVCodecContext* mAudioContext;
     AVStream *mAVStream;
     enum AVSampleFormat mOutputSampleFormat;
-    uint64_t mOutputChannelLayout;
+    AVChannelLayout mOutputChannelLayout;
     int mOutputSampleRate;
     ssize_t mFramePos;
     ssize_t mFrameSize;
diff -Naur openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/videostate.cpp openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/videostate.cpp
--- openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/videostate.cpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/videostate.cpp	2024-04-08 21:30:43.442200960 +0200
@@ -242,8 +242,11 @@
         return 0;
     }
 }
-
+#if LIBAVFORMAT_VERSION_MAJOR >= 61
+int VideoState::istream_write(void *, const uint8_t *, int)
+#else
 int VideoState::istream_write(void *, uint8_t *, int)
+#endif
 {
     throw std::runtime_error("can't write to read-only stream");
 }
diff -Naur openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/videostate.hpp openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/videostate.hpp
--- openmw-openmw-0.48.0/extern/osg-ffmpeg-videoplayer/videostate.hpp	2023-08-08 11:23:20.000000000 +0200
+++ openmw-openmw-0.48.0.new/extern/osg-ffmpeg-videoplayer/videostate.hpp	2024-04-08 21:30:07.593747554 +0200
@@ -155,7 +155,11 @@
     double get_master_clock();
 
     static int istream_read(void *user_data, uint8_t *buf, int buf_size);
+#if LIBAVFORMAT_VERSION_MAJOR >= 61
+    static int istream_write(void *user_data, const uint8_t *buf, int buf_size);
+#else
     static int istream_write(void *user_data, uint8_t *buf, int buf_size);
+#endif
     static int64_t istream_seek(void *user_data, int64_t offset, int whence);
 
     osg::ref_ptr<osg::Texture2D> mTexture;
