commit 3c259a45e338a1c99d9f2dea96d48e295b8ac9f1
Author: q66 <q66@chimera-linux.org>
Date:   Tue Jun 4 13:02:33 2024 +0200

    track capacity in strbuf to speed up udev hwdb
    
    Since the hwdb is about 12M, this avoids reallocating the strbuf
    memory all the time, which was really bad for performance. Now
    hwdb update takes around a second instead of 20.

diff --git a/src/basic/strbuf.c b/src/basic/strbuf.c
index 0617acc..40b6310 100644
--- a/src/basic/strbuf.c
+++ b/src/basic/strbuf.c
@@ -36,6 +36,7 @@ struct strbuf* strbuf_new(void) {
                 .buf = new0(char, 1),
                 .root = new0(struct strbuf_node, 1),
                 .len = 1,
+                .cap = 1,
                 .nodes_count = 1,
         };
         if (!str->buf || !str->root) {
@@ -47,6 +48,17 @@ struct strbuf* strbuf_new(void) {
         return str;
 }
 
+int strbuf_reserve(struct strbuf *str, size_t cap) {
+        void *nbuf;
+        if (cap <= str->cap) return 0;
+        nbuf = realloc(str->buf, cap);
+        if (!nbuf)
+                return -errno;
+        str->buf = nbuf;
+        str->cap = cap;
+        return 0;
+}
+
 static struct strbuf_node* strbuf_node_cleanup(struct strbuf_node *node) {
         size_t i;
 
@@ -146,11 +158,17 @@ ssize_t strbuf_add_string(struct strbuf *str, const char *s, size_t len) {
                 node = child->child;
         }
 
-        /* add new string */
-        buf_new = realloc(str->buf, str->len + len+1);
-        if (!buf_new)
-                return -ENOMEM;
-        str->buf = buf_new;
+        /* multiply the capacity if needed */
+        if ((str->len + len + 1) > str->cap) {
+                size_t newcap = str->cap * 2;
+                while ((str->len + len + 1) > newcap)
+                        newcap *= 2;
+                void *newp = realloc(str->buf, newcap);
+                if (!newp)
+                        return -ENOMEM;
+                str->buf = newp;
+                str->cap = newcap;
+        }
         off = str->len;
         memcpy(str->buf + off, s, len);
         str->len += len;
diff --git a/src/basic/strbuf.h b/src/basic/strbuf.h
index 6187c08..f856d79 100644
--- a/src/basic/strbuf.h
+++ b/src/basic/strbuf.h
@@ -10,6 +10,7 @@
 struct strbuf {
         char *buf;
         size_t len;
+        size_t cap;
         struct strbuf_node *root;
 
         size_t nodes_count;
@@ -33,6 +34,7 @@ struct strbuf_child_entry {
 };
 
 struct strbuf* strbuf_new(void);
+int strbuf_reserve(struct strbuf *str, size_t cap);
 ssize_t strbuf_add_string(struct strbuf *str, const char *s, size_t len);
 void strbuf_complete(struct strbuf *str);
 struct strbuf* strbuf_free(struct strbuf *str);
diff --git a/src/shared/hwdb-util.c b/src/shared/hwdb-util.c
index 12621b7..f3bad31 100644
--- a/src/shared/hwdb-util.c
+++ b/src/shared/hwdb-util.c
@@ -600,6 +600,9 @@ int hwdb_update(const char *root, const char *hwdb_bin_dir, bool strict, bool co
         if (!trie->strings)
                 return -ENOMEM;
 
+        /* reserve 16M to avoid allocs */
+        strbuf_reserve(trie->strings, 0x10000 * 16);
+
         /* index */
         trie->root = new0(struct trie_node, 1);
         if (!trie->root)
